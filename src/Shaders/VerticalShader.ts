module.exports = '#define PI 3.1415926\n\nattribute float diagonal;\n\nuniform sampler2D heightmap;\nuniform float vpH;\nuniform vec2 origin;\nuniform float prog;\n\nvarying float opacity;\nvarying float diag;\n\n// Normalizes a value between 0 - 1\nfloat normFloat(float n, float minVal, float maxVal){\n\treturn max(0.0, min(1.0, (n-minVal) / (maxVal-minVal)));\n}\n\nvoid main() {\tdiag = diagonal;\n\tfloat fluctuation = -texture2D(heightmap, uv).r;\n\n\t// Endless threadmill\n\tvec3 newPos = position;\n\tnewPos.xz -= origin;\n\tnewPos.x = (fract((newPos.x + RANGE) / RANGE2) * RANGE2) - RANGE;\n\tnewPos.z = (fract((newPos.z + RANGE) / RANGE2) * RANGE2) - RANGE;\n\tnewPos.y = fluctuation * 0.5;\n\n\t// Size\n\tfloat size = normFloat(abs(cameraPosition.y), -0.5, 2.0) * 0.25;\n\n\t// Fade out as camera fog\n\tfloat distOrigin = distance(newPos.xz, vec2(-0.5, 0.0));\n\topacity = (fluctuation + 0.5) * normFloat(distOrigin, RANGE, RANGE * 0.5);\n\n\t// Make logo\n\tfloat ffLogo = step(distOrigin, 1.7) * prog;\n\t//newPos.y = max(ffLogo * 0.5, newPos.y);\n\topacity = max(ffLogo, opacity);\n\tsize = max(ffLogo, size);\n\n\t// Position, size    \n\tvec4 mvPosition = modelViewMatrix * vec4(newPos, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\tgl_PointSize = vpH * size / -mvPosition.z;\n}';